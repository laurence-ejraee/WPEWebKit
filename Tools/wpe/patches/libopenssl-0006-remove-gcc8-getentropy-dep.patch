--- libopenssl-1.1.1g/crypto/rand/rand_unix.c	2020-04-21 13:22:39.000000000 +0100
+++ libopenssl-1.1.1g/crypto/rand/rand_unix.c	2022-11-16 10:42:13.434785288 +0000
@@ -364,12 +364,12 @@
      * - Linux since 3.17 with glibc 2.25
      * - FreeBSD since 12.0 (1200061)
      */
-#  if defined(__GNUC__) && __GNUC__>=2 && defined(__ELF__) && !defined(__hpux)
-    extern int getentropy(void *buffer, size_t length) __attribute__((weak));
+// #  if defined(__GNUC__) && __GNUC__>=2 && defined(__ELF__) && !defined(__hpux)
+//     extern int getentropy(void *buffer, size_t length) __attribute__((weak));
 
-    if (getentropy != NULL)
-        return getentropy(buf, buflen) == 0 ? (ssize_t)buflen : -1;
-#  else
+//     if (getentropy != NULL)
+//         return getentropy(buf, buflen) == 0 ? (ssize_t)buflen : -1;
+// #  else
     union {
         void *p;
         int (*f)(void *buffer, size_t length);
@@ -384,7 +384,7 @@
     ERR_pop_to_mark();
     if (p_getentropy.p != NULL)
         return p_getentropy.f(buf, buflen) == 0 ? (ssize_t)buflen : -1;
-#  endif
+// #  endif
 
     /* Linux supports this since version 3.17 */
 #  if defined(__linux) && defined(__NR_getrandom)
