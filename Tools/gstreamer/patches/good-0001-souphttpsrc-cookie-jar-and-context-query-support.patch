From 4b47ee77a85a7b2a26a16410330d94d6f7ee52b0 Mon Sep 17 00:00:00 2001
From: Philippe Normand <philn@igalia.com>
Date: Wed, 28 Oct 2015 12:00:09 +0100
Subject: [PATCH 01/16] souphttpsrc: cookie jar and context query support

Use a volatile Cookie jar to store cookies and handle the context
query so that session data can be shared with other elements (like
adaptivedemux).

https://bugzilla.gnome.org/show_bug.cgi?id=726314
---
 ext/soup/gstsouphttpsrc.c | 43 +++++++++++++++++++++++++++++++++++----
 ext/soup/gstsouphttpsrc.h |  1 +
 2 files changed, 40 insertions(+), 4 deletions(-)

diff --git a/ext/soup/gstsouphttpsrc.c b/ext/soup/gstsouphttpsrc.c
index ab3155efe..d2b4a5951 100644
--- a/ext/soup/gstsouphttpsrc.c
+++ b/ext/soup/gstsouphttpsrc.c
@@ -493,6 +493,7 @@ gst_soup_http_src_init (GstSoupHTTPSrc * src)
   src->session = NULL;
   src->external_session = NULL;
   src->forced_external_session = FALSE;
+  src->cookie_jar = NULL;
   src->msg = NULL;
   src->timeout = DEFAULT_TIMEOUT;
   src->log_level = DEFAULT_SOUP_LOG_LEVEL;
@@ -919,7 +920,6 @@ gst_soup_http_src_session_open (GstSoupHTTPSrc * src)
   if (!src->session) {
     GstQuery *query;
     gboolean can_share = (src->timeout == DEFAULT_TIMEOUT)
-        && (src->cookies == NULL)
         && (src->ssl_strict == DEFAULT_SSL_STRICT)
         && (src->tls_interaction == NULL) && (src->proxy == NULL)
         && (src->tls_database == DEFAULT_TLS_DATABASE)
@@ -1031,6 +1031,9 @@ gst_soup_http_src_session_open (GstSoupHTTPSrc * src)
     GST_DEBUG_OBJECT (src, "Re-using session");
   }
 
+  src->cookie_jar = soup_cookie_jar_new ();
+  soup_session_add_feature (src->session,
+      SOUP_SESSION_FEATURE (src->cookie_jar));
   return TRUE;
 }
 
@@ -1046,6 +1049,11 @@ gst_soup_http_src_session_close (GstSoupHTTPSrc * src)
     src->msg = NULL;
   }
 
+  if (src->cookie_jar) {
+    g_object_unref (src->cookie_jar);
+    src->cookie_jar = NULL;
+  }
+
   if (src->session) {
     if (!src->session_is_shared)
       soup_session_abort (src->session);
@@ -1500,13 +1508,13 @@ gst_soup_http_src_build_message (GstSoupHTTPSrc * src, const gchar * method)
   }
   if (src->cookies) {
     gchar **cookie;
+    SoupURI *uri = soup_uri_new (src->location);
 
     for (cookie = src->cookies; *cookie != NULL; cookie++) {
-      soup_message_headers_append (src->msg->request_headers, "Cookie",
-          *cookie);
+      soup_cookie_jar_set_cookie (src->cookie_jar, uri, *cookie);
     }
 
-    soup_message_disable_feature (src->msg, SOUP_TYPE_COOKIE_JAR);
+    soup_uri_free (uri);
   }
 
   if (!src->compress) {
@@ -2070,6 +2078,12 @@ gst_soup_http_src_query (GstBaseSrc * bsrc, GstQuery * query)
   gboolean ret;
   GstSchedulingFlags flags;
   gint minsize, maxsize, align;
+  GstContext *context;
+  GstStructure *context_structure;
+  char *cookie;
+  const gchar *cookies[2];
+  const gchar *context_type;
+  SoupURI *uri;
 
   switch (GST_QUERY_TYPE (query)) {
     case GST_QUERY_URI:
@@ -2081,6 +2095,27 @@ gst_soup_http_src_query (GstBaseSrc * bsrc, GstQuery * query)
       }
       ret = TRUE;
       break;
+    case GST_QUERY_CONTEXT:
+      if (gst_query_parse_context_type (query, &context_type)
+          && !g_strcmp0 (context_type, "http-headers")) {
+        uri = soup_uri_new (src->location);
+        cookie = soup_cookie_jar_get_cookies (src->cookie_jar, uri, TRUE);
+        context = gst_context_new ("http-headers", FALSE);
+        gst_context_make_writable (context);
+        context_structure = gst_context_writable_structure (context);
+        if (cookie != NULL) {
+          cookies[0] = cookie;
+          cookies[1] = NULL;
+          gst_structure_set (context_structure, "cookies", G_TYPE_STRV, cookies,
+              NULL);
+          g_free (cookie);
+        }
+        gst_query_set_context (query, context);
+        soup_uri_free (uri);
+        ret = TRUE;
+        break;
+      }
+
     default:
       ret = FALSE;
       break;
diff --git a/ext/soup/gstsouphttpsrc.h b/ext/soup/gstsouphttpsrc.h
index f848cde6d..1b01a7824 100644
--- a/ext/soup/gstsouphttpsrc.h
+++ b/ext/soup/gstsouphttpsrc.h
@@ -63,6 +63,7 @@ struct _GstSoupHTTPSrc {
   gboolean session_is_shared;
   SoupSession *external_session; /* Shared via GstContext */
   gboolean forced_external_session; /* If session was explicitly set from application */
+  SoupCookieJar *cookie_jar;   /* Volatile HTTP cookie storage */
   SoupMessage *msg;            /* Request message. */
   gint retry_count;            /* Number of retries since we received data */
   gint max_retries;            /* Maximum number of retries */
-- 
2.34.1

